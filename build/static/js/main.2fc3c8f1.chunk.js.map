{"version":3,"sources":["sha256.js","App.js","index.js"],"names":["MySha256","n","x","inSequence","H0","H1","H2","H3","H4","H5","H6","H7","K","len","unescape","encodeURIComponent","concat","String","fromCharCode","length","numberOfBlocks","Math","ceil","arr","Array","i","j","position","charCodeAt","lengthLow","lengthHigh","floor","W","s0","rotateRight","s1","a","b","c","d","e","f","g","h","temp1","maj","nullSeq","toString","slice","App","state","text","hash","ref1","startHash","bind","event","this","setState","target","value","hashed","hashIt","sha256","class","onChange","readOnly","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2fc3c8f1.chunk.js","sourcesContent":["class MySha256 {\r\n\r\n    /**\r\n     * Pomocna funkce pro rotovani doprava\r\n     */\r\n    static rotateRight(n, x) {\r\n        return (x >>> n) | (x << (32-n));\r\n    }\r\n\r\n    /**\r\n     * Funkce pro hashovani do SHA-256\r\n     */\r\n    static hashIt(inSequence) {\r\n\r\n        // inicializace pole hashovacich hodnot\r\n        // prvnich 32 bitu zlomkovych casti druhych odmocnin prvnich 8 prvocisel (2,3,5,7,11,13,17,19)\r\n        let H0 = 0x6a09e667;\r\n        let H1 = 0xbb67ae85;\r\n        let H2 = 0x3c6ef372;\r\n        let H3 = 0xa54ff53a;\r\n        let H4 = 0x510e527f;\r\n        let H5 = 0x9b05688c;\r\n        let H6 = 0x1f83d9ab;\r\n        let H7 = 0x5be0cd19;\r\n\r\n        // inicializace pole zaokrouhlovacich konstant\r\n        // prvnich 32 bitu zlomkovych casti tretich odmocnin prvnich 64 prvocisel (2,3,5,7,...,311)\r\n        const K = [\r\n            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n        ];\r\n\r\n        // zakodovani vstupniho retezce do UTF8\r\n        inSequence = unescape(encodeURIComponent(inSequence));\r\n\r\n        // predpriprava\r\n        inSequence = inSequence.concat(String.fromCharCode(0x80));  // na konec retezce pridam jednickovy bit\r\n\r\n        // prevedeni rezetce do (vice) bloku o velikosti 512 bitu\r\n        // retezec se sklada z 8 bitovych charu\r\n        // vysledkem pole sestnacti 32 bitovych celych cisel\r\n        const len = (inSequence.length / 4) + 1 + 1; // delka zpravy v 32 bitovych celych cislech + jednickovy bit + prirazena delka\r\n        const numberOfBlocks = Math.ceil(len / 16);  // pocet potrebnych 512 bitu velkych bloku na uchovani sestnacti celych cisel - zaokrouhleni na cele cislo nahoru\r\n        const arr = new Array(numberOfBlocks);     // vytvoreni pole o velikosti N dalsich poli pro uchovavani 32 bitovych celych cisel\r\n        // cyklim pres vsechny 512 bitove bloky\r\n        for (let i = 0; i < numberOfBlocks; i++) {\r\n            arr[i] = new Array(16); // vytvoreni pole v poli o velikosti 16 prvku\r\n            for (let j = 0; j < 16; j++) { // zakodovani 4 znaku do jednoho celeho cisla (tj. 64 znaku do 512 bitoveho bloku) - BIG-ENDIAN\r\n                let position = i*64 + j*4;\r\n                arr[i][j] = (inSequence.charCodeAt(position + 0) << 24) \r\n                          | (inSequence.charCodeAt(position + 1) << 16)\r\n                          | (inSequence.charCodeAt(position + 2) << 8)\r\n                          | (inSequence.charCodeAt(position + 3) << 0);\r\n            }\r\n        }\r\n\r\n        // do posledni dvojice 32 bitovych cisel umistim delku retezce v bitech - BIG-ENDIAN\r\n        const lengthLow = ((inSequence.length-1) * 8) >>> 0;\r\n        const lengthHigh = ((inSequence.length-1) * 8) >>> 16 >>> 16;\r\n        arr[numberOfBlocks-1][14] = Math.floor(lengthHigh);\r\n        arr[numberOfBlocks-1][15] = lengthLow;\r\n\r\n        // proces vypoctu hashe\r\n        for (let i = 0; i < numberOfBlocks; i++) {\r\n            // vytvoreni pole o velikosti 64 prvkÅ¯\r\n            const W = new Array(64);\r\n\r\n            // prvnich 16 prvku z puvodniho pole se zkopiruje \r\n            for (let j = 0; j < 16; j++) {\r\n                W[j] = arr[i][j];\r\n            }\r\n\r\n            // zkopirovanych 16 prvku se rozsiri do zbyvajicich 48 prvku (64-16=48) \r\n            for (let j = 16; j < 64; j++) {\r\n                const s0 = MySha256.rotateRight(7, W[j-15]) ^ MySha256.rotateRight(18, W[j-15]) ^ (W[j-15] >>> 3);\r\n                const s1 = MySha256.rotateRight(17, W[j-2]) ^ MySha256.rotateRight(19, W[j-2]) ^ (W[j-2] >>> 10);\r\n                W[j] = (W[j-16] + s0 + W[j-7] + s1) >>> 0;\r\n            }\r\n\r\n            // inicializace pracovnich promennych na aktualni hashovaci hodnotu\r\n            let a = H0;\r\n            let b = H1;\r\n            let c = H2;\r\n            let d = H3;\r\n            let e = H4;\r\n            let f = H5;\r\n            let g = H6;\r\n            let h = H7;\r\n\r\n            // hlavni smycka kompresni funkce\r\n            for (let j = 0; j < 64; j++) {\r\n                const S1 = MySha256.rotateRight(6, e) ^ MySha256.rotateRight(11, e) ^ MySha256.rotateRight(25, e);\r\n                const ch = (e & f) ^ (~e & g);\r\n                const temp1 = h + S1 + ch + K[j] + W[j];\r\n                const S0 = MySha256.rotateRight(2,  a) ^ MySha256.rotateRight(13, a) ^ MySha256.rotateRight(22, a);\r\n                const maj = (a & b) ^ (a & c) ^ (b & c);\r\n                const temp2 = S0 + maj;\r\n                \r\n                h = g;\r\n                g = f;\r\n                f = e;\r\n                e = (d + temp1) >>> 0;\r\n                d = c;\r\n                c = b;\r\n                b = a;\r\n                a = (temp1 + temp2) >>> 0;\r\n            }\r\n\r\n            // vypocet nove hashovaci hodnoty (soucet puvodni a nove hodnoty)\r\n            H0 = (H0 + a) >>> 0;\r\n            H1 = (H1 + b) >>> 0;\r\n            H2 = (H2 + c) >>> 0;\r\n            H3 = (H3 + d) >>> 0;\r\n            H4 = (H4 + e) >>> 0;\r\n            H5 = (H5 + f) >>> 0;\r\n            H6 = (H6 + g) >>> 0;\r\n            H7 = (H7 + h) >>> 0;\r\n        }\r\n\r\n        // konverze H0 az H7 na hexadecimalni retezce\r\n        const nullSeq = '00000000';\r\n        H0 = (nullSeq + H0.toString(16)).slice(-8);\r\n        H1 = (nullSeq + H1.toString(16)).slice(-8);\r\n        H2 = (nullSeq + H2.toString(16)).slice(-8);\r\n        H3 = (nullSeq + H3.toString(16)).slice(-8);\r\n        H4 = (nullSeq + H4.toString(16)).slice(-8);\r\n        H5 = (nullSeq + H5.toString(16)).slice(-8);\r\n        H6 = (nullSeq + H6.toString(16)).slice(-8);\r\n        H7 = (nullSeq + H7.toString(16)).slice(-8);\r\n\r\n        return H0.concat(H1, H2, H3, H4, H5, H6, H7);\r\n    }\r\n\r\n}\r\n\r\nexport default MySha256;","import React from 'react';\nimport './App.css';\n\nimport MySha256 from './sha256.js';\nimport sha256 from 'js-sha256';\n\nclass App extends React.Component {\n\n  constructor() {\n    super()\n    this.state = {\n      text: '',\n      hash: '',\n      ref1: '',\n    }\n    this.startHash = this.startHash.bind(this)\n  }\n\n  startHash(event) {\n    this.setState({text: event.target.value})\n    const hashed = MySha256.hashIt(event.target.value)\n    const ref1 = sha256(event.target.value)\n    this.setState({hash: hashed, ref1: ref1})\n    if (event.target.value === \"\") {\n      this.setState({\n        text: '',\n        hash: '',\n        ref1: ''\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>SHA-256</h1>\n        <div class=\"content\">\n          <div class=\"input-field\">\n            <h2>VstupnÃ­ text</h2>\n            <textarea onChange={this.startHash}></textarea>\n          </div>\n          <div class=\"output-field\">\n            <h2>Hash</h2>\n            <textarea value={this.state.hash} readOnly></textarea>\n          </div>\n          <div class=\"output-field\">\n            <h2>ReferenÄnÃ­ hash</h2>\n            <textarea value={this.state.ref1} readOnly></textarea>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}